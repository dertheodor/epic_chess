1. Beschreiben Sie in kurzen Texten (stichwortartig), wofür die angeführten Klassen im Programm zuständig bzw. verantwortlich sind:
   Draw, DrawGUI, DrawActionListener, ColorItemListener, ShapeManager und ScribbleDrawer.

Draw
- enthält main Methode, hiermit wird in Java das Programm ausgeführt
- erstellt die GUI
- wenn doCommand mit "clear" aufgerufen wird, wird die GUI auf Ihren Anfangszustand
zurückgesetzt
- wenn doCommand mit "quit" aufgerufen wird, wird das Fenster geschlossen und somit das Programm
geschlossen

DrawGUI
- DrawGUI erbt von JFrame
- DrawGUI implementiert die GUI
- der Konstruktor der DrawGUI Klasse erstellt die GUI und setzt die EventListener
(DrawActionListener und ColorItemListener)
- unsere GUI beinhaltet zwei DrawActionListener, "clear" und "quit" diese sorgen für die
Funktionalität der beiden Knöpfe clear und quit

DrawActionListener
- implementiert das Interface ActionListener
- beinhaltet den Konstruktor DrawActionListener und die Methode actionPerformed
- DrawActionListener horcht auf einen Command und führt diesen aus, wenn aufgerufen

ColorItemListener
- implementiert das Interface ItemListener
- ist zuständig für das Ändern der Farbe -> wenn Nutzer im Dialog andere Farbe auswählt dann
wird itemStateChanged ausgeführt und je nachdem welche Farbe man gewählt hat, diese gesetzt

ShapeManager
- implementiert das Interface ItemListener
- beinhaltet die abstrake Klasse ShapeDrawer, welche von MouseAdapter erbt und das Interface
MouseMotionListener implementiert
- Beinhaltet die Hauptfunktionalitäten der einzelnen Shape Klassen und managet, welche gerade aktiv sind.
- Wird in der folgenden Aufgabe genauer erklärt.

ScribbleDrawer
- die Klasse ScribbleDrawer ist für das tatsächliche Zeichnen zuständig im Scribble Modus
- wenn ein beliebiger Knopf der Maus gedrückt wird, werden sich die X und Y Koordinaten des
Cursors gespeichert, wenn man dann die Maus bewegt, wird zwischen diesen Koordinaten und
denen wo man die Maus loslässt ein Strich gemalt
------------------------------------------------------------------------------------------------------------------------

2. Ablauf Operation quit
Wenn unsere doCommand Methode mit dem command "quit" aufgerufen wird, schließt sich dadurch
die GUI und danach auch das Programm selbst. Die eigentlich Logik dahinter ist wie folgt aufgebaut:
Wir haben einen JButton Knopf quit welcher einen Listener auf sich hat. Wird nun dieser "Quit" Knopf
gedrückt, wird mit Hilfe des Listeners und der actionPerformed-Methode doCommand mit dem String "quit"
aufgerufen. Dadurch schließt sich das Fenster. Des weiterem gibt es einen WindowListener auf dem Fenster
schließen Knopf, wodurch ebenfalls doCommand mit "quit" aufgerufen wird.

3. Ablauf Operation Farbauswahl (im color_chooser)
Die Farbauswahl erfolgt durch ein Untermenu in einem JLabel namens "Color:". Die möglichen Farben werden in
in der Methode DrawGUI definiert. Diese werden dann in das eben genannte JLabel hinzugefügt. Im Rumpf von
itemStateChanged werden dann alle möglichen Farben abgeklappert und die gerade ausgewählte als die tatsächliche
Farbe dann gesetzt. Als default Farbe ist schwarz gesetzt.

4. Ablauf der Scribble-Operation (Kurven malen)
Kurven malen funktioniert wie folgt: Wenn der Nutzer einen beliebiger Knopf der Maus drückt,
werden sich die X und Y Koordinaten des Cursors gespeichert. Wenn man dann die Maus bewegt,
wird zwischen diesen eben gespeicherten Koordinaten und denen wo man die Maus loslässt ein Strich gezeichnet.
Im Rumpf von mouseDragged wird für die Kurve dann die aktuell ausgewählte Farbe gesetzt und dann der Strich
gezeichent.

5. Ablauf Operation Rechteck zeichnen *
Im Grunde funktioniert Rechteck zeichnen ähnlich wie die Scribble Operation. Wird eine Maustaste gedrückt,
wird nun aber nur die erste Ecke des Rechtecks festgesetzt.
Mousedragged funktioniert mit dem so genannten rubberband Mode. Dabei wird , während die Maus "gedragged" wird,
temporär die zweite Ecke des Rechtecks gesetzt
und zwischen den beiden Ecken ein Rechteck aufgespannt. Wird die Maus jetzt weiter bewegt, wird das eben temporär gezeichnete Rechteck,
mit der Farbe des Hintergrunds übermalt
es verschwindet also wieder. An dem Punkt wo sich die Maus jetzt befindet, wird das neue Rechteck aufgespannt.
Da dieser Vorgang häufig vorkommt,
wirkt es so als wäre das Rechteck elastisch.
Erst wenn mousereleased ausgeführt wird, wird ein letztes Mal das letzte temporäre Rechteck übermalt und das finale Rechteck gesetzt.
Der Unterschied zur Scribble Operation besteht also darin, dass die Finale Zeichnung also erst mit dem loslassen der Maus
gemacht wird, alle Bewegungen davor sind grundsätzlich irrelevant, für das Rechteck, welches auf dem Bildschirm bleibt.
Außerdem folgt der gezeichnete Strich hierbei natürlich auch nicht jeder Bewegung der Maus, sondern der Punkt an dem sich
die Maus befindet bildet nur die zweite Ecke des Rechtecks, zwischen denen es dann gezeichnet wird.

6. Ablauf Operation Shape wählen
Default ist der scribbleDrawer, der immer eingestellt wird, sollte das Programm starten. Beim Start des Programms werden
jedoch auch Objekte der OvalDrawer und der RectangleDrawer Klasse erstellt. Sie bleiben nur inaktiv solange sie noch nicht
verwendet werden. Wenn der Drawer jetzt auf einen anderen Drawer geändert werden soll,
wird nur der mouse- und der mouseMotionListener im alten Drawer gelöscht und auf den neuen Drawer gesetzt.
Die Änderung zwischen den Drawern funktioniert sonst identisch zu der Änderung zwischen den Farben.

